name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: 'test'
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: "Build (${{ matrix.target.os }})"
    runs-on: ${{ matrix.target.host || 'ubuntu-latest' }}
    env:
      GO111MODULE: on
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: linux
            ext: ""
            archive: tar.gz
          - os: windows
            ext: .exe
            archive: zip
          - os: freebsd
            ext: ""
            archive: tar.gz
          - os: darwin
            ext: ""
            archive: tar.gz
            # Use macos-13 (Intel) for better Docker compatibility
            host: macos-13

    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/.cache/fyne-cross
          key: ${{ runner.os }}-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Install fyne-cross
        run: go install github.com/fyne-io/fyne-cross@latest

      - name: Install Fyne
        run: go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Install Docker (macOS)
        if: runner.os == 'macOS'
        uses: douglascamata/setup-docker-macos-action@v1-alpha

      - name: Set version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Prepare build
        run: |
          go mod tidy
          go mod download

      - name: Build with fyne-cross
        run: |
          mkdir -p dist
          fyne-cross \
            ${{ matrix.target.os }} \
            -debug -no-cache \
            -app-version ${{ steps.version.outputs.VERSION }} \
            -app-id co.ispapp.psshclient \
            -icon ./Icon.png \
            -name psshclient${{ matrix.target.ext }} \
            -output ./dist/

      - name: Create release archive
        run: |
          cd dist
          if [ "${{ matrix.target.archive }}" = "zip" ]; then
            zip -r psshclient-${{ matrix.target.os }}-${{ steps.version.outputs.VERSION }}.zip *
          else
            tar -czf psshclient-${{ matrix.target.os }}-${{ steps.version.outputs.VERSION }}.tar.gz *
          fi
          ls -la

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: psshclient-${{ matrix.target.os }}
          path: dist/psshclient-${{ matrix.target.os }}-${{ steps.version.outputs.VERSION }}.*
          retention-days: 1

  # Build native macOS ARM64 on macos-latest (Apple Silicon)
  build-macos-arm64:
    name: "Build (darwin-arm64)"
    runs-on: macos-latest
    env:
      GO111MODULE: on

    steps:
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-arm64-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Install Fyne
        run: go install fyne.io/fyne/v2/cmd/fyne@latest

      - name: Set version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Prepare build
        run: |
          go mod tidy
          go mod download

      - name: Build natively for ARM64
        env:
          CGO_ENABLED: 1
          GOOS: darwin
          GOARCH: arm64
        run: |
          mkdir -p dist
          go build -ldflags "-s -w" -o dist/psshclient .
          cd dist
          fyne package -os darwin -icon ../Icon.png -name psshclient \
            -appVersion ${{ steps.version.outputs.VERSION }} -appID co.ispapp.psshclient
          tar -czf psshclient-darwin-arm64-${{ steps.version.outputs.VERSION }}.tar.gz psshclient.app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: psshclient-darwin-arm64
          path: dist/psshclient-darwin-arm64-${{ steps.version.outputs.VERSION }}.tar.gz
          retention-days: 1

  release:
    needs: [build, build-macos-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true